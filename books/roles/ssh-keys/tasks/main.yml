- name: Set up multiple authorized keys
  authorized_key:
    user: '{{ ansible_user }}'
    state: present
    key: '{{ item }}'
  with_items: '{{ lookup("file", ssh_public_keys_file).splitlines() }}'

- set_fact: ssh_key_filename="id_ed25519"
  when: ssh_key_filename is undefined

- debug:
    msg: "ssh_key_filename: {{ ssh_key_filename }}"

- name: ensure id_ed25519 private key is present
  copy: 
    src:  ~/.ssh/{{ ssh_key_filename }}
    dest: ~/.ssh/id_ed25519_{{ lookup('env', 'SITE') }}
    mode: 0600
    force: yes

- name: ensure id_ed25519 public key is present
  copy: 
    src:  ~/.ssh/{{ ssh_key_filename }}.pub
    dest: ~/.ssh/id_ed25519_{{ lookup('env', 'SITE') }}.pub
    mode: 0644
    force: yes

- name: Check if private key exists
  stat:
    path: "~/.ssh/id_ed25519"
  register: priv_key_result

- name: Create backup of private key
  copy:
    remote_src: yes
    src: "~/.ssh/id_ed25519"
    dest: "~/.ssh/id_ed25519.orig"
  when: priv_key_result.stat.exists and not priv_key_result.stat.islnk is defined

- name: create link to id_ed25519 private key
  file:
    src:   ~/.ssh/id_ed25519_{{ lookup('env', 'SITE') }}
    dest:  ~/.ssh/id_ed25519
    state: link
    force: true
    mode:  0600

- name: Check if public key exists
  stat:
    path: "~/.ssh/id_ed25519.pub"
  register: pub_key_result

- name: Create backup of public key
  copy:
    remote_src: yes
    src: "~/.ssh/id_ed25519.pub"
    dest: "~/.ssh/id_ed25519.pub.orig"
  when: pub_key_result.stat.exists and not pub_key_result.stat.islnk is defined

- name: create link to id_ed25519 public key
  file:
    src:   ~/.ssh/id_ed25519_{{ lookup('env', 'SITE') }}.pub
    dest:  ~/.ssh/id_ed25519.pub
    state: link
    force: true
    mode:  0644