---
- name: "[terraform - prep] Prepare localhost for terraform deployment"
  delegate_to: localhost
  run_once: true
  block:

  - name: "[terraform - prep] Create temporary directory for plan"
    file:
      name: "{{ terraform_dir }}"
      state: directory

  - name: "[terraform - prep] Check for existing .tf files in {{ terraform_dir }}"
    delegate_to: localhost
    find:
      paths: "{{ terraform_dir }}"
      patterns: "*.tf"
    register: files_to_delete

  - name: "[terraform - prep] Delete any .tf files found in {{ terraform_dir }}"
    delegate_to: localhost
    file:
      path: "{{ item.path }}"
      state: absent
    with_items: "{{ files_to_delete.files }}"

  - name: "[terraform - prep] Create provider plan"
    template:
      src: main.tf.j2
      dest: "{{ terraform_dir }}/main.tf"

  - name: "[terraform - prep] Create plan for vms"
    template:
      src: host_node.tf.j2
      dest: "{{ terraform_dir }}/{{ item.key }}.tf"
    with_dict: "{{ proxmox_vms }}"

  - name: "[terraform - deploy] Create VMs with terraform (can only run once)"
    run_once: true 
    block:

    - name: "[terraform - deploy] Run terraform init"
      command: terraform init
      args:
        chdir: "{{ terraform_dir }}"

    - name: "[terraform - deploy] Run terraform plan"
      command: terraform plan
      args:
        chdir: "{{ terraform_dir }}"

    - name: "[terraform - deploy] Run terraform apply"
      command: terraform apply -auto-approve
      args:
        chdir: "{{ terraform_dir }}"                 

    - name: "[terraform - deploy] Awaiting VMs to come online"
      wait_for_connection: 
        delay: 180
        timeout: 600
      vars:
        ansible_pipelining: no

- name: "[VM Buildout] Set timezone to America/Los_Angeles"
  timezone:
    name: America/Los_Angeles

- name: "[VM Buildout] Set vm hostname"
  command: "hostnamectl set-hostname {{ inventory_hostname }}"